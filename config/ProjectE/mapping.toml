
[general]
	#When the next EMC mapping occurs write the results to config/ProjectE/pregenerated_emc.json and only ever run the mapping again when that file does not exist, this setting is set to false, or an error occurred parsing that file.
	pregenerate = false
	#Want to take a look at the internals of EMC Calculation? Enable this to write all the conversions and setValue-Commands to config/ProjectE/mappingdump.json
	dumpEverythingToFile = false
	#Log known EMC Exploits. This can not and will not find all possible exploits. This will only find exploits that result in fixed/custom emc values that the algorithm did not overwrite. Exploits that derive from conversions that are unknown to ProjectE will not be found.
	logEMCExploits = true

[CraftingMapper]

	[CraftingMapper.CreateSequencedAssemblyMapper]
		#ProjectE-Integration Recipe Mapper for Create Sequenced Assembly Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.AppliedEnergisticsInscriberMapper]
		#ProjectE-Integration Recipe Mapper for Applied Energistics Inscriber Mapper. Required Mods: [ae2]
		enabled = true

	[CraftingMapper.AlchemistryFusionMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Fusion Mapper. Required Mods: [alchemistry]
		enabled = true

	[CraftingMapper.CreateDeployerApplicationMapper]
		#ProjectE-Integration Recipe Mapper for Create Deployer Application Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateHauntingMapper]
		#ProjectE-Integration Recipe Mapper for Create Haunting Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateMechanicalCraftingMapper]
		#ProjectE-Integration Recipe Mapper for Create Mechanical Crafting Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateCUTTINGMapper]
		#ProjectE-Integration Recipe Mapper for Create CUTTINGMapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateMillingMapper]
		#ProjectE-Integration Recipe Mapper for Create Milling Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateBASINMapper]
		#ProjectE-Integration Recipe Mapper for Create BASINMapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreatePressingMapper]
		#ProjectE-Integration Recipe Mapper for Create Pressing Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.AlchemistryCombinerMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Combiner Mapper. Required Mods: [alchemistry]
		enabled = true

	[CraftingMapper.AlchemistryAtomizerMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Atomizer Mapper. Required Mods: [alchemistry]
		enabled = true

	[CraftingMapper.Smithing]
		#Maps smithing recipes.
		enabled = true

	[CraftingMapper.CreateSplashingMapper]
		#ProjectE-Integration Recipe Mapper for Create Splashing Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateSandpaperPolishingMapper]
		#ProjectE-Integration Recipe Mapper for Create Sandpaper Polishing Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateCuttingMapper]
		#ProjectE-Integration Recipe Mapper for Create Cutting Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateCrushingMapper]
		#ProjectE-Integration Recipe Mapper for Create Crushing Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.CreateCompactingMapper]
		#ProjectE-Integration Recipe Mapper for Create Compacting Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.AlchemistryFissionMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Fission Mapper. Required Mods: [alchemistry]
		enabled = true

	[CraftingMapper.FallbackRecipeType]
		#Fallback for default handling of recipes that extend ICraftingRecipe, AbstractCookingRecipe, SingleItemRecipe, or SmithingRecipe. This will catch modded extensions of the vanilla recipe classes, and if the VanillaRecipeTypes mapper is disabled, this mapper will still catch the vanilla recipes.
		enabled = true

	[CraftingMapper.VanillaRecipeTypes]
		#Maps the different vanilla recipe types.
		enabled = true

	[CraftingMapper.CreateItemApplicationMapper]
		#ProjectE-Integration Recipe Mapper for Create Item Application Mapper. Required Mods: [create]
		enabled = true

	[CraftingMapper.AlchemistryLiquifierMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Liquifier Mapper. Required Mods: [alchemistry]
		enabled = true

	[CraftingMapper.AlchemistryCompactorMapper]
		#ProjectE-Integration Recipe Mapper for Alchemistry Compactor Mapper. Required Mods: [alchemistry]
		enabled = true

[enabledMappers]
	#Set EMC=0 for everything in the forge:raw_materials tag
	RawOresBlacklistMapper = true
	#Set EMC=0 for everything in the forge:ores tag
	OresBlacklistMapper = true
	#Add Conversions for Crafting Recipes gathered from net.minecraft.item.crafting.RecipeManager
	CraftingMapper = true
	#Add Conversions for all lingering potions to arrow recipes
	TippedArrowMapper = true
	#Adds back and forth conversions of objects and their Tag variant. (EMC values assigned to tags will not behave properly if this mapper is disabled)
	TagMapper = true
	#Add Conversions for all weathered copper variants
	WeatheredCopperMapper = true
	#Add Conversions for Brewing Recipes
	BrewingMapper = true
	#Recipe mapper for custom recipes that don't implement IRecipe
	ProjectEIntegrationRecipeMapper = true
	#Uses the `custom_emc.json` File to add EMC values.
	CustomEMCMapper = true
	#Loads json files within datapacks (data/<domain>/pe_custom_conversions/*.json) to add values and conversions
	CustomConversionMapper = true
	#Allows other mods to easily set EMC values using the ProjectEAPI
	APICustomEMCMapper = true

